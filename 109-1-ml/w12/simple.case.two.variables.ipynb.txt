{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A simple gradient search for IntroML@cs.nccu.edu.tw\n",
    "#### prepared by Chao-Lin Liu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### $ z = f(x,y) = (x-2)^2+(y-2)^2$\n",
    "##### visualization: https://academo.org/demos/3d-surface-plotter/?expression=(x-2)*(x-2)%2B(y-2)*(y-2)&xRange=-50%2C+50&yRange=-50%2C+50&resolution=25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# func = lambda x: 2*x*x-7*x+2\n",
    "# func = lambda x: x*x*x*x-2*x*x+3*x\n",
    "func = lambda x,y : (x-2)*(x-2)+(y-2)*(y-2)\n",
    "print(func(3,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is your first guess\n",
    "guessX = 2.5\n",
    "guessY = -2.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# setting the learning rate\n",
    "rate = 0.02 # setting the rate to a large number will make the search explode\n",
    "# rate = 1 # this special value to make the search bouncing between two particular spots!\n",
    "# rate = 0.05 # a \"reasonably small\" learning rate is better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a factor for the stopping criteria\n",
    "precision = 0.000001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# your patience \n",
    "max_iter = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 如果我們知道函數的確實形式的話，就可以做微分\n",
    "dfuncX = lambda x: 2*(x-2)\n",
    "dfuncY = lambda y: 2*(y-2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfuncX(2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfuncY(-2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# starting from zeroth iteration\n",
    "iter = 0\n",
    "# kicking off the search\n",
    "step_sizeX = 1\n",
    "step_sizeY = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while (step_sizeX > precision) and (step_sizeY > precision) and (iter < max_iter):\n",
    "    prevX = guessX                         # save the previous guess\n",
    "    prevY = guessY                         # save the previous guess\n",
    "    guessX = guessX - rate * dfuncX(guessX)  # move to the next guess\n",
    "    guessY = guessY - rate * dfuncY(guessY)  # move to the next guess\n",
    "    step_sizeX = abs(guessX-prevX)\n",
    "    step_sizeY = abs(guessY-prevY)\n",
    "    iter = iter+1\n",
    "    print(\"Iteration: \",iter,\"\\n current guess for (X,Y) is: \", guessX, \",\", guessY, \"\\n f(\",guessX,\",\",guessY,\") is: \", func(guessX, guessY))\n",
    "    \n",
    "print(\"The mininum is \",func(guessX, guessY), \" when the search stops at (x,y) = \", guessX, \",\", guessY)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
